{"ast":null,"code":"var _jsxFileName = \"/home/rhoka/Desktop/ReactJs/04-onwards-to-a-more-realistic-example/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Tasks from \"./components/Tasks/Tasks\";\nimport NewTask from \"./components/NewTask/NewTask\";\nimport useHttp from \"./hooks/use-http\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n  const {\n    isLoading,\n    error,\n    sendRequest: fetchTasks\n  } = useHttp(); // const fetchTasks = async () => {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try {\n  //     const response = await fetch(\n  //       \"https://tesapp-d0cbe-default-rtdb.firebaseio.com/tasks.json\"\n  //     );\n  //     if (!response.ok) {\n  //       throw new Error(\"Request failed!\");\n  //     }\n  //     const data = await response.json();\n  //     console.log(data);\n  //     const loadedTasks = [];\n  //     for (const taskKey in data) {\n  //       loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n  //     }\n  //     // console.log(loadedTasks);\n  //     setTasks(loadedTasks);\n  //   } catch (err) {\n  //     setError(err.message || \"Something went wrong!\");\n  //   }\n  //   setIsLoading(false);\n  // };\n\n  useEffect(() => {\n    const transfromTasks = taskObj => {\n      const loadedTasks = [];\n\n      for (const taskKey in taskObj) {\n        loadedTasks.push({\n          id: taskKey,\n          text: taskObj[taskKey].text\n        });\n      }\n\n      setTasks(loadedTasks);\n    };\n\n    fetchTasks(\"https://tesapp-d0cbe-default-rtdb.firebaseio.com/tasks.json\", transfromTasks);\n  }, []);\n\n  const taskAddHandler = task => {\n    setTasks(prevTasks => prevTasks.concat(task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NewTask, {\n      onAddTask: taskAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n      items: tasks,\n      loading: isLoading,\n      error: error,\n      onFetch: fetchTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"3QapvwoJZfWeMEkerBpIx1ugNIA=\", false, function () {\n  return [useHttp];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rhoka/Desktop/ReactJs/04-onwards-to-a-more-realistic-example/src/App.js"],"names":["React","useEffect","useState","Tasks","NewTask","useHttp","App","tasks","setTasks","isLoading","error","sendRequest","fetchTasks","transfromTasks","taskObj","loadedTasks","taskKey","push","id","text","taskAddHandler","task","prevTasks","concat"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,OAAP,MAAoB,kBAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAEO,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,WAAW,EAAEC;AAAjC,MAAgDP,OAAO,EAA7D,CAJa,CAMb;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,cAAc,GAAIC,OAAD,IAAa;AAClC,YAAMC,WAAW,GAAG,EAApB;;AAEA,WAAK,MAAMC,OAAX,IAAsBF,OAAtB,EAA+B;AAC7BC,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEC,UAAAA,EAAE,EAAEF,OAAN;AAAeG,UAAAA,IAAI,EAAEL,OAAO,CAACE,OAAD,CAAP,CAAiBG;AAAtC,SAAjB;AACD;;AACDX,MAAAA,QAAQ,CAACO,WAAD,CAAR;AACD,KAPD;;AAQAH,IAAAA,UAAU,CACR,6DADQ,EAERC,cAFQ,CAAV;AAID,GAbQ,EAaN,EAbM,CAAT;;AAeA,QAAMO,cAAc,GAAIC,IAAD,IAAU;AAC/Bb,IAAAA,QAAQ,CAAEc,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAiBF,IAAjB,CAAhB,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,SAAS,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AACE,MAAA,KAAK,EAAEb,KADT;AAEE,MAAA,OAAO,EAAEE,SAFX;AAGE,MAAA,KAAK,EAAEC,KAHT;AAIE,MAAA,OAAO,EAAEE;AAJX;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAhEQN,G;UAI+CD,O;;;KAJ/CC,G;AAkET,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Tasks from \"./components/Tasks/Tasks\";\nimport NewTask from \"./components/NewTask/NewTask\";\nimport useHttp from \"./hooks/use-http\";\n\nfunction App() {\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n  const { isLoading, error, sendRequest: fetchTasks } = useHttp();\n\n  // const fetchTasks = async () => {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try {\n  //     const response = await fetch(\n  //       \"https://tesapp-d0cbe-default-rtdb.firebaseio.com/tasks.json\"\n  //     );\n\n  //     if (!response.ok) {\n  //       throw new Error(\"Request failed!\");\n  //     }\n\n  //     const data = await response.json();\n  //     console.log(data);\n\n  //     const loadedTasks = [];\n\n  //     for (const taskKey in data) {\n  //       loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n  //     }\n  //     // console.log(loadedTasks);\n  //     setTasks(loadedTasks);\n  //   } catch (err) {\n  //     setError(err.message || \"Something went wrong!\");\n  //   }\n  //   setIsLoading(false);\n  // };\n\n  useEffect(() => {\n    const transfromTasks = (taskObj) => {\n      const loadedTasks = [];\n\n      for (const taskKey in taskObj) {\n        loadedTasks.push({ id: taskKey, text: taskObj[taskKey].text });\n      }\n      setTasks(loadedTasks);\n    };\n    fetchTasks(\n      \"https://tesapp-d0cbe-default-rtdb.firebaseio.com/tasks.json\",\n      transfromTasks\n    );\n  }, []);\n\n  const taskAddHandler = (task) => {\n    setTasks((prevTasks) => prevTasks.concat(task));\n  };\n\n  return (\n    <React.Fragment>\n      <NewTask onAddTask={taskAddHandler} />\n      <Tasks\n        items={tasks}\n        loading={isLoading}\n        error={error}\n        onFetch={fetchTasks}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}